"""
Open3d visualization tool box
Written by Jihan YANG
All rights preserved from 2021 - present.
"""
import open3d
import torch
import matplotlib
import numpy as np

# box_colormap = [
#     [1, 1, 1],
#     [0, 1, 0],
#     [0, 1, 1],
#     [1, 1, 0],a
#     [1, 0, 0],
#     [0, 0, 1],
#     [1, 165.0/255, 0],
#     [1, 105.0/255, 180.0/255],
#     [160.0/255, 32.0/255, 240.0/255],
#     [0, 139.0/255, 139.0/255],
#     [139.0/255, 139.0/255, 0],
#     [1, 193.0/255, 193.0/255]
# ]

box_colormap = [
    [1, 1, 1],
    [0, 1, 0],  # pred vehicle 绿色
    [1, 1, 0],  # pred, pedestrian 黄色
    [138.0/255, 43.0/255, 226.0/255],  # pred cyclist 紫色
    [1, 0, 0],
    [0, 0, 1],
    [1, 165.0/255, 0],
    [1, 105.0/255, 180.0/255],
    [160.0/255, 32.0/255, 240.0/255],
    [0, 139.0/255, 139.0/255],
    [139.0/255, 139.0/255, 0],
    [1, 193.0/255, 193.0/255]
]

gtbox_colormap = [
    [1, 1, 1],
    [0, 0, 1],  # gt vehicle 蓝色
    [1, 128.0/255, 0],  # gt pedestrian 棕色
    [1, 0, 0],  # gt, cyclist 红色
]


def get_coor_colors(obj_labels):
    """
    Args:
        obj_labels: 1 is ground, labels > 1 indicates different instance cluster

    Returns:
        rgb: [N, 3]. color for each point.
    """
    colors = matplotlib.colors.XKCD_COLORS.values()
    max_color_num = obj_labels.max()

    color_list = list(colors)[:max_color_num+1]
    colors_rgba = [matplotlib.colors.to_rgba_array(color) for color in color_list]
    label_rgba = np.array(colors_rgba)[obj_labels]
    label_rgba = label_rgba.squeeze()[:, :3]

    return label_rgba


def draw_scenes(points, gt_boxes=None, gt_labels=None, ref_boxes=None, ref_labels=None, ref_scores=None, point_colors=None, draw_origin=True, idx=0):
    if isinstance(points, torch.Tensor):
        points = points.cpu().numpy()
    if isinstance(gt_boxes, torch.Tensor):
        gt_boxes = gt_boxes.cpu().numpy()
    if isinstance(ref_boxes, torch.Tensor):
        ref_boxes = ref_boxes.cpu().numpy()

    vis = open3d.visualization.Visualizer()
    vis.create_window()

    vis.get_render_option().point_size = 1.0
    # vis.get_render_option().background_color = np.zeros(3)
    vis.get_render_option().background_color = np.ones(3)

    # draw origin
    if draw_origin:
        axis_pcd = open3d.geometry.TriangleMesh.create_coordinate_frame(size=1.0, origin=[0, 0, 0])
        vis.add_geometry(axis_pcd)

    pts = open3d.geometry.PointCloud()
    pts.points = open3d.utility.Vector3dVector(points[:, :3])

    vis.add_geometry(pts)
    if point_colors is None:
        # pts.colors = open3d.utility.Vector3dVector(np.ones((points.shape[0], 3)))
        pts.colors = open3d.utility.Vector3dVector(np.zeros((points.shape[0], 3)))
    else:
        pts.colors = open3d.utility.Vector3dVector(point_colors)

    if gt_boxes is not None:
        vis = draw_gtbox(vis, gt_boxes, (0, 0, 1), gt_labels)

    if ref_boxes is not None:
        vis = draw_box(vis, ref_boxes, (0, 1, 0), ref_labels, ref_scores)
        # vis = draw_arrow(vis, ref_boxes, (0, 1, 0))


    vis.run()
    # vis.capture_screen_image(f'/opt/dataset/3dod_debug/52497/vis/{idx}.jpg')
    vis.destroy_window()

def translate_boxes_to_open3d_instance(gt_boxes):
    """
             4-------- 6
           /|         /|
          5 -------- 3 .
          | |        | |
          . 7 -------- 1
          |/         |/
          2 -------- 0
    """
    center = gt_boxes[0:3]
    lwh = gt_boxes[3:6]
    # axis_angles = np.array([0, 0, gt_boxes[6] + 1e-10])
    axis_angles = np.array([0, 0, gt_boxes[6] + 1e-10])
    # axis_angles = np.array([0, 0, gt_boxes[8] + 1e-10])
    rot = open3d.geometry.get_rotation_matrix_from_axis_angle(axis_angles)
    # rot = open3d.geometry.get_rotation_matrix_from_zxy(axis_angles)

    box3d = open3d.geometry.OrientedBoundingBox(center, rot, lwh)

    line_set = open3d.geometry.LineSet.create_from_oriented_bounding_box(box3d)

    # import ipdb; ipdb.set_trace(context=20)
    lines = np.asarray(line_set.lines)
    lines = np.concatenate([lines, np.array([[1, 4], [7, 6]])], axis=0)

    line_set.lines = open3d.utility.Vector2iVector(lines)

    return line_set, box3d

def translate_gtboxes_to_open3d_instance(gt_boxes):
    """
             4-------- 6
           /|         /|
          5 -------- 3 .
          | |        | |
          . 7 -------- 1
          |/         |/
          2 -------- 0
    """
    center = gt_boxes[0:3]
    lwh = gt_boxes[3:6]
    # axis_angles = np.array((0, 0, gt_boxes[8] + 1e-10))  # for waymo_pkl
    axis_angles = np.array((0, 0, gt_boxes[6] + 1e-10))
    # axis_angles = np.array(gt_boxes[6:9])
    rot = open3d.geometry.get_rotation_matrix_from_axis_angle(axis_angles)  #
    # rot = open3d.geometry.get_rotation_matrix_from_xyz(axis_angles)

    box3d = open3d.geometry.OrientedBoundingBox(center, rot, lwh)

    line_set = open3d.geometry.LineSet.create_from_oriented_bounding_box(box3d)

    # import ipdb; ipdb.set_trace(context=20)
    lines = np.asarray(line_set.lines)
    lines = np.concatenate([lines, np.array([[1, 4], [7, 6]])], axis=0)

    line_set.lines = open3d.utility.Vector2iVector(lines)

    return line_set, box3d


# zhp
def draw_arrow(vis, gt_boxes, color=(0, 1, 0), ref_labels=None):
    def get_cross_prod_mat(pVec_Arr):
        # pVec_Arr shape (3)
        qCross_prod_mat = np.array([
            [0, -pVec_Arr[2], pVec_Arr[1]],
            [pVec_Arr[2], 0, -pVec_Arr[0]],
            [-pVec_Arr[1], pVec_Arr[0], 0],
        ])
        return qCross_prod_mat

    def caculate_align_mat(pVec_Arr):
        scale = np.linalg.norm(pVec_Arr)
        pVec_Arr = pVec_Arr / scale
        # must ensure pVec_Arr is also a unit vec.
        z_unit_Arr = np.array([0, 0, 1])
        z_mat = get_cross_prod_mat(z_unit_Arr)

        z_c_vec = np.matmul(z_mat, pVec_Arr)
        z_c_vec_mat = get_cross_prod_mat(z_c_vec)

        if np.dot(z_unit_Arr, pVec_Arr) == -1:
            qTrans_Mat = -np.eye(3, 3)
        elif np.dot(z_unit_Arr, pVec_Arr) == 1:
            qTrans_Mat = np.eye(3, 3)
        else:
            qTrans_Mat = np.eye(3, 3) + z_c_vec_mat + np.matmul(z_c_vec_mat,
                                                                z_c_vec_mat) / (1 + np.dot(z_unit_Arr, pVec_Arr))

        qTrans_Mat *= scale
        return qTrans_Mat

    for i in range(gt_boxes.shape[0]):
        begin = gt_boxes[i][0:3]
        vec = np.array((0, 0, gt_boxes[i][6]))
        z_unit_Arr = np.array([0, 0, 1])
        end = np.add(begin,vec)
        vec_Arr = np.array(end) - np.array(begin)
        vec_len = np.linalg.norm(vec_Arr)

        mesh_frame = open3d.geometry.TriangleMesh.create_coordinate_frame(size=60, origin=[0, 0, 0])
        mesh_arrow = open3d.geometry.TriangleMesh.create_arrow(
            cone_height=0.2 * 1,
            cone_radius=0.06 * 1,
            cylinder_height=0.8 * 1,
            cylinder_radius=0.04 * 1
        )
        mesh_arrow.paint_uniform_color([0, 1, 0])
        mesh_arrow.compute_vertex_normals()

        mesh_sphere_begin = open3d.geometry.TriangleMesh.create_sphere(radius=10, resolution=20)
        mesh_sphere_begin.translate(begin)
        mesh_sphere_begin.paint_uniform_color([0, 1, 1])
        mesh_sphere_begin.compute_vertex_normals()

        mesh_sphere_end = open3d.geometry.TriangleMesh.create_sphere(radius=10, resolution=20)
        mesh_sphere_end.translate(end)
        mesh_sphere_end.paint_uniform_color([0, 1, 1])
        mesh_sphere_end.compute_vertex_normals()

        rot_mat = caculate_align_mat(vec_Arr)
        mesh_arrow.rotate(rot_mat, center=np.array([0, 0, 0]))
        mesh_arrow.translate(np.array(begin))

        vis.add_geometry(mesh_arrow)
    return vis

def draw_box(vis, gt_boxes, color=(0, 1, 0), ref_labels=None, score=None, colormap=box_colormap):
    for i in range(gt_boxes.shape[0]):
        line_set, box3d = translate_boxes_to_open3d_instance(gt_boxes[i])
        if ref_labels is None:
            line_set.paint_uniform_color(color)
        else:
            line_set.paint_uniform_color(colormap[ref_labels[i]])
            # line_set.paint_uniform_color(colormap[i%len(box_colormap)])

        vis.add_geometry(line_set)

        # if score is not None:
        #     corners = box3d.get_box_points()
        #     vis.add_3d_label(corners[5], '%.2f' % score[i])
    return vis

def draw_gtbox(vis, gt_boxes, color=(0, 1, 0), ref_labels=None, score=None, colormap=gtbox_colormap):
    for i in range(gt_boxes.shape[0]):
        line_set, box3d = translate_gtboxes_to_open3d_instance(gt_boxes[i])
        if ref_labels is None:
            line_set.paint_uniform_color(color)
        else:
            line_set.paint_uniform_color(colormap[ref_labels[i]])

        vis.add_geometry(line_set)

        # if score is not None:
        #     corners = box3d.get_box_points()
        #     vis.add_3d_label(corners[5], '%.2f' % score[i])
    return vis

